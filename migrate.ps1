# Script de Migra√ß√£o para Git √önico
# Execute este script da raiz do projeto: .\migrate.ps1

Write-Host "üîÑ Iniciando migra√ß√£o para reposit√≥rio Git √∫nico..." -ForegroundColor Cyan
Write-Host ""

# 1. Verificar se estamos na raiz do projeto
if (-not (Test-Path "Cargo.toml")) {
    Write-Host "‚ùå Erro: Execute este script da raiz do projeto (bridge_telemetria)" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Verifica√ß√£o inicial: OK" -ForegroundColor Green
Write-Host ""

# 2. Fazer backup do hist√≥rico Git (se existir)
Write-Host "üìã Fazendo backup do hist√≥rico Git..." -ForegroundColor Yellow

if (Test-Path "telemetry_client\.git") {
    Push-Location telemetry_client
    git log --oneline > ../client_git_history.txt
    Write-Host "  ‚úÖ Hist√≥rico do cliente salvo em client_git_history.txt" -ForegroundColor Green
    Pop-Location
}

if (Test-Path "telemetry_server\.git") {
    Push-Location telemetry_server
    git log --oneline > ../server_git_history.txt
    Write-Host "  ‚úÖ Hist√≥rico do servidor salvo em server_git_history.txt" -ForegroundColor Green
    Pop-Location
}

Write-Host ""

# 3. Remover reposit√≥rios Git dos subdiret√≥rios
Write-Host "üóëÔ∏è  Removendo reposit√≥rios Git internos..." -ForegroundColor Yellow

if (Test-Path "telemetry_client\.git") {
    Remove-Item -Recurse -Force "telemetry_client\.git"
    Write-Host "  ‚úÖ Removido: telemetry_client/.git" -ForegroundColor Green
} else {
    Write-Host "  ‚ÑπÔ∏è  telemetry_client/.git j√° n√£o existe" -ForegroundColor Gray
}

if (Test-Path "telemetry_server\.git") {
    Remove-Item -Recurse -Force "telemetry_server\.git"
    Write-Host "  ‚úÖ Removido: telemetry_server/.git" -ForegroundColor Green
} else {
    Write-Host "  ‚ÑπÔ∏è  telemetry_server/.git j√° n√£o existe" -ForegroundColor Gray
}

Write-Host ""

# 4. Verificar se j√° existe reposit√≥rio Git na raiz
if (Test-Path ".git") {
    Write-Host "‚ö†Ô∏è  J√° existe um reposit√≥rio Git na raiz" -ForegroundColor Yellow
    $response = Read-Host "Deseja reinicializ√°-lo? (S/N)"
    if ($response -eq "S" -or $response -eq "s") {
        Remove-Item -Recurse -Force ".git"
        Write-Host "  ‚úÖ Reposit√≥rio anterior removido" -ForegroundColor Green
    } else {
        Write-Host "  ‚ÑπÔ∏è  Mantendo reposit√≥rio existente" -ForegroundColor Gray
        Write-Host "  ‚ÑπÔ∏è  Pulando inicializa√ß√£o do Git" -ForegroundColor Gray
        $skipGitInit = $true
    }
}

Write-Host ""

# 5. Inicializar Git na raiz
if (-not $skipGitInit) {
    Write-Host "üîß Inicializando reposit√≥rio Git na raiz..." -ForegroundColor Yellow
    git init
    Write-Host "  ‚úÖ Git inicializado" -ForegroundColor Green
    Write-Host ""
}

# 6. Verificar se o workspace compila
Write-Host "üî® Verificando compila√ß√£o do workspace..." -ForegroundColor Yellow
$compileResult = cargo check 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "  ‚úÖ Workspace compila corretamente" -ForegroundColor Green
} else {
    Write-Host "  ‚ùå Erro na compila√ß√£o" -ForegroundColor Red
    Write-Host $compileResult
    exit 1
}

Write-Host ""

# 7. Adicionar arquivos ao Git (se n√£o foi pulado)
if (-not $skipGitInit) {
    Write-Host "üì¶ Adicionando arquivos ao Git..." -ForegroundColor Yellow
    git add .
    Write-Host "  ‚úÖ Arquivos adicionados" -ForegroundColor Green
    Write-Host ""

    # 8. Criar commit inicial
    Write-Host "üíæ Criando commit inicial..." -ForegroundColor Yellow
    
    git commit -m "chore: migrate to unified git repository with cargo workspace" `
               -m "Create cargo workspace for telemetry_client and telemetry_server" `
               -m "Unify dependencies and build profiles" `
               -m "Add comprehensive documentation" `
               -m "Production-ready code with clean architecture"
    
    Write-Host "  ‚úÖ Commit inicial criado" -ForegroundColor Green
    Write-Host ""
}

# 9. Mostrar status
Write-Host "üìä Status do reposit√≥rio:" -ForegroundColor Cyan
git status --short
Write-Host ""

# 10. Resumo final
Write-Host "=" -NoNewline -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan
Write-Host "üéâ Migra√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
Write-Host "=" * 61 -ForegroundColor Cyan
Write-Host ""
Write-Host "üìù Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "  1. Verificar build: " -NoNewline -ForegroundColor White
Write-Host "cargo build" -ForegroundColor Cyan
Write-Host "  2. Rodar testes: " -NoNewline -ForegroundColor White
Write-Host "cargo test" -ForegroundColor Cyan
Write-Host "  3. Adicionar remote: " -NoNewline -ForegroundColor White
Write-Host "git remote add origin [url]" -ForegroundColor Cyan
Write-Host "  4. Push para remote: " -NoNewline -ForegroundColor White
Write-Host "git push -u origin main" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìö Documenta√ß√£o:" -ForegroundColor Yellow
Write-Host "  ‚Ä¢ README.md - Guia principal do projeto" -ForegroundColor White
Write-Host "  ‚Ä¢ MIGRATION_GUIDE.md - Detalhes da migra√ß√£o" -ForegroundColor White
Write-Host "  ‚Ä¢ SYSTEM_ANALYSIS.md - An√°lise t√©cnica completa" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ Comandos do workspace:" -ForegroundColor Yellow
Write-Host "  ‚Ä¢ cargo run -p telemetry_server" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ cargo run -p telemetry_client" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ cargo build --release" -ForegroundColor Cyan
Write-Host ""
Write-Host "‚úÖ Sistema pronto para uso!" -ForegroundColor Green
